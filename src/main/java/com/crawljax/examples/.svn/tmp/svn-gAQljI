package com.crawljax.examples;

import org.apache.commons.configuration.ConfigurationException;

import com.crawljax.browser.EmbeddedBrowser.BrowserType;
import com.crawljax.core.CrawljaxController;
import com.crawljax.core.CrawljaxException;
import com.crawljax.core.configuration.CrawlSpecification;
import com.crawljax.core.configuration.CrawljaxConfiguration;
import com.crawljax.core.configuration.InputSpecification;
import com.crawljax.core.configuration.ProxyConfiguration;
import com.crawljax.core.configuration.ThreadConfiguration;
import com.crawljax.plugins.aji.JSModifyProxyPlugin;
import com.crawljax.plugins.aji.executiontracer.AstInstrumenter;
import com.crawljax.plugins.webscarabwrapper.WebScarabWrapper;

/**
 * Simple Example.
 * 
 * @author dannyroest@gmail.com (Danny Roest)
 * @version $id$
 */
public final class CrawljaxSimpleExampleSettings {

	private static final String URL = "http://spci.st.ewi.tudelft.nl/demo/aowe/";
	//private static final String URL = "http://localhost/index.htm";
	

	private static final int MAX_DEPTH = 0;
	//private static final int MAX_DEPTH = 0; // this indicates no depth-limit
	private static final int MAX_NUMBER_STATES = 10;

	private CrawljaxSimpleExampleSettings() {

	}

	private static CrawljaxConfiguration getCrawljaxConfiguration() {
		CrawljaxConfiguration config = new CrawljaxConfiguration();
		config.setCrawlSpecification(getCrawlSpecification());
		config.setThreadConfiguration(getThreadConfiguration());
		// config.setBrowser(BrowserType.android);
		config.setBrowser(BrowserType.firefox);
		
		//config.addPlugin(new WebScarabWrapper());
		//config.setProxyConfiguration(new ProxyConfiguration());
			
		
		// Amin: Generate a proxy
		config.setProxyConfiguration(new ProxyConfiguration());
		WebScarabWrapper web = new WebScarabWrapper();
		config.addPlugin(web);
		// JSModifyProxyPlugin modifier = new JSModifyProxyPlugin(new AstInstrumenter(), excludeList);
		JSModifyProxyPlugin modifier = new JSModifyProxyPlugin(new AstInstrumenter());
		modifier.setJsSourceOutputFolder("/Users/aminmf/javascripts/");
		modifier.excludeDefaults();
		// TODO: check with true
		modifier.setInstrumentAsyncs(true);
		web.addPlugin(modifier);
		
		
		//config.setBrowser(BrowserType.chrome);
		//System.setProperty("webdriver.chrome.driver" , "chromedriver.exe");
		

		// Generate a crawl report
		//config.addPlugin(new CrawlOverview());

		
		return config;
	}

	private static ThreadConfiguration getThreadConfiguration() {
		ThreadConfiguration tc = new ThreadConfiguration();
		tc.setBrowserBooting(true);
		tc.setNumberBrowsers(3);
		tc.setNumberThreads(3);
		return tc;
	}

	private static CrawlSpecification getCrawlSpecification() {
		CrawlSpecification crawler = new CrawlSpecification(URL);

		crawler.setDiverseCrawling(false);  // this is the default setting
		crawler.setEfficientCrawling(false);  // this is the default setting
		
		//crawler.setDiverseCrawling(true);
		//crawler.setEfficientCrawling(true);
		//crawler.setClickOnce(false);
		
			
		// click these elements
		crawler.click("a");
		crawler.click("div");
		crawler.click("span");
		crawler.click("img");
		crawler.click("input").withAttribute("type", "submit");

		// except these
		crawler.dontClick("a").underXPath("//DIV[@id='guser']");
		crawler.dontClick("a").withText("Language Tools");

		crawler.setInputSpecification(getInputSpecification());

		// limit the crawling scope
		crawler.setMaximumStates(MAX_NUMBER_STATES);
		crawler.setDepth(MAX_DEPTH);

		return crawler;
	}

	private static InputSpecification getInputSpecification() {
		InputSpecification input = new InputSpecification();
		input.field("q").setValue("Crawljax");
		return input;
	}

	/**
	 * @param args
	 *            the command line args
	 */
	public static void main(String[] args) {
		try {
			CrawljaxController crawljax = new CrawljaxController(getCrawljaxConfiguration());
			crawljax.run();
		} catch (CrawljaxException e) {
			e.printStackTrace();
			System.exit(1);
		} catch (ConfigurationException e) {
			e.printStackTrace();
			System.exit(1);
		}

	}

}
